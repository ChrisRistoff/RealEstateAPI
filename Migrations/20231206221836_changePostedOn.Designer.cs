// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace RealEstateAPI.Migrations
{
    [DbContext(typeof(RealEstateContext))]
    [Migration("20231206221836_changePostedOn")]
    partial class changePostedOn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RealEstateAPI.Models.Apartment", b =>
                {
                    b.Property<int>("apartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("apartmentId"));

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("areaId")
                        .HasColumnType("integer");

                    b.Property<int>("bathrooms")
                        .HasColumnType("integer");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("furnished")
                        .HasColumnType("boolean");

                    b.Property<int>("parkingSpaces")
                        .HasColumnType("integer");

                    b.Property<string>("postcode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("postedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("price")
                        .HasColumnType("double precision");

                    b.Property<int>("rooms")
                        .HasColumnType("integer");

                    b.Property<int>("sqrFeet")
                        .HasColumnType("integer");

                    b.HasKey("apartmentId");

                    b.HasIndex("areaId");

                    b.ToTable("apartments");
                });

            modelBuilder.Entity("RealEstateAPI.Models.Area", b =>
                {
                    b.Property<int>("areaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("areaId"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("kindergardens")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("schools")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("shops")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("areaId");

                    b.ToTable("areas");
                });

            modelBuilder.Entity("RealEstateAPI.Models.House", b =>
                {
                    b.Property<int>("houseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("houseId"));

                    b.Property<string>("address")
                        .HasColumnType("text");

                    b.Property<int>("areaId")
                        .HasColumnType("integer");

                    b.Property<int>("bathrooms")
                        .HasColumnType("integer");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<bool>("furnished")
                        .HasColumnType("boolean");

                    b.Property<int>("parkingSpaces")
                        .HasColumnType("integer");

                    b.Property<string>("postcode")
                        .HasColumnType("text");

                    b.Property<double>("price")
                        .HasColumnType("double precision");

                    b.Property<int>("rooms")
                        .HasColumnType("integer");

                    b.Property<int>("sqrFeet")
                        .HasColumnType("integer");

                    b.HasKey("houseId");

                    b.HasIndex("areaId");

                    b.ToTable("houses");
                });

            modelBuilder.Entity("RealEstateAPI.Models.Apartment", b =>
                {
                    b.HasOne("RealEstateAPI.Models.Area", "areas")
                        .WithMany()
                        .HasForeignKey("areaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("areas");
                });

            modelBuilder.Entity("RealEstateAPI.Models.House", b =>
                {
                    b.HasOne("RealEstateAPI.Models.Area", "areas")
                        .WithMany()
                        .HasForeignKey("areaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("areas");
                });
#pragma warning restore 612, 618
        }
    }
}
